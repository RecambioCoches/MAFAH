{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.authUrl = 'https://localhost:8000';\n  }\n  login(username, password) {\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this.http.post(this.authUrl + '/api/login_check', {\n      username,\n      password\n    }, {\n      headers\n    }).pipe(tap(res => console.log(\"logged in \" + JSON.stringify(res))), catchError(this.handleError));\n  }\n  register(username, password, type) {\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this.http.post(this.authUrl + '/api/register', {\n      username,\n      password,\n      type\n    }, {\n      headers\n    }).pipe(tap(res => console.log(\"registered \" + JSON.stringify(res))));\n  }\n  handleError(err) {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    alert(`An error occurred: ${err.error.message}`);\n    console.error(err);\n    return throwError(() => err.error.message);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,UAAU,QAAQ,MAAM;AACjC,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAKhD,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,YAAO,GAAG,wBAAwB;EAG1C;EAEAC,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IACpC,MAAMC,OAAO,GAAG,IAAIV,WAAW,EAAE,CAACW,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACzE,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,IAAI,CAACC,OAAO,GAAG,kBAAkB,EAAE;MAAEL,QAAQ;MAAEC;IAAQ,CAAE,EAAE;MAAEC;IAAO,CAAE,CAAC,CAC7FI,IAAI,CACDX,GAAG,CAACY,GAAG,IAAIC,OAAO,CAACC,GAAG,CAAC,YAAY,GAAGC,IAAI,CAACC,SAAS,CAACJ,GAAG,CAAC,CAAC,CAAC,EAC3Db,UAAU,CAAC,IAAI,CAACkB,WAAW,CAAC,CAC/B;EACT;EAGAC,QAAQ,CAACb,QAAgB,EAAEC,QAAgB,EAAEa,IAAY;IACrD,MAAMZ,OAAO,GAAG,IAAIV,WAAW,EAAE,CAACW,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACzE,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,IAAI,CAACC,OAAO,GAAG,eAAe,EAAE;MAAEL,QAAQ;MAAEC,QAAQ;MAAEa;IAAI,CAAE,EAAE;MAAEZ;IAAO,CAAE,CAAC,CAChGI,IAAI,CACDX,GAAG,CAACY,GAAG,IAAIC,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGC,IAAI,CAACC,SAAS,CAACJ,GAAG,CAAC,CAAC,CAAC,CAC/D;EACT;EAGQK,WAAW,CAACG,GAAQ;IAC1B;IACA;IACAC,KAAK,CAAC,sBAAsBD,GAAG,CAACE,KAAK,CAACC,OAAO,EAAE,CAAC;IAChDV,OAAO,CAACS,KAAK,CAACF,GAAG,CAAC;IAClB,OAAOtB,UAAU,CAAC,MAAMsB,GAAG,CAACE,KAAK,CAACC,OAAO,CAAE;EAC7C;;AA/BWtB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAuB,SAAXvB,WAAW;EAAAwB,YAFV;AAAM","names":["HttpHeaders","throwError","catchError","tap","AuthService","constructor","http","login","username","password","headers","set","post","authUrl","pipe","res","console","log","JSON","stringify","handleError","register","type","err","alert","error","message","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Gabriel_C\\Desktop\\MAFAH\\client\\src\\app\\core\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\n\nimport { throwError } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private authUrl = 'https://localhost:8000';\n\n  constructor(private http: HttpClient) {\n  }\n\n  login(username: string, password: string) {\n      const headers = new HttpHeaders().set('Content-Type', 'application/json');\n      return this.http.post<any>(this.authUrl + '/api/login_check', { username, password }, { headers })\n          .pipe(\n              tap(res => console.log(\"logged in \" + JSON.stringify(res))),\n              catchError(this.handleError)\n          )\n  }\n\n\n  register(username: string, password: string, type: string) {\n      const headers = new HttpHeaders().set('Content-Type', 'application/json');\n      return this.http.post<any>(this.authUrl + '/api/register', { username, password, type }, { headers })\n          .pipe(\n              tap(res => console.log(\"registered \" + JSON.stringify(res)))\n          );\n  }\n\n\n  private handleError(err: any) {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    alert(`An error occurred: ${err.error.message}`);\n    console.error(err);\n    return throwError(() => err.error.message );\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}