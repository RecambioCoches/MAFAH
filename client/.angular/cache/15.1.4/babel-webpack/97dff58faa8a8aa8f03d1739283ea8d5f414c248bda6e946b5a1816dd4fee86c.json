{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError, tap, map } from \"rxjs/operators\";\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport * as moment from \"moment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.authUrl = 'https://localhost:8000';\n    this.helper = new JwtHelperService();\n  }\n  login(username, password) {\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this.http.post(this.authUrl + '/api/login_check', {\n      username,\n      password\n    }, {\n      headers\n    }).pipe(map(res => {\n      console.log(\"logged in \" + JSON.stringify(res));\n      localStorage.setItem('auth_token', res.token);\n    }), catchError(this.handleError));\n  }\n  register(username, password) {\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this.http.post(this.authUrl + '/api/register', {\n      username,\n      password\n    }, {\n      headers\n    }).pipe(tap(res => console.log(\"registered \" + JSON.stringify(res))));\n  }\n  // ðŸ‘‡ En caso de estar registrado nuestro valor de expiraciÃ³n serÃ¡ menor que el momento actual.\n  isLoggedIn() {\n    let now = moment();\n    return now.isBefore(this.getExpiration());\n  }\n  isLoggedOut() {\n    return !this.isLoggedIn();\n  }\n  getExpiration() {\n    const auth_token = localStorage.getItem('auth_token');\n    const token = this.helper.decodeToken(auth_token);\n    if (token == null) return moment.now;else return token.exp;\n  }\n  // Obtener el rol decodificando el token almacenado en localStorage.\n  getRole() {\n    const auth_token = localStorage.getItem('auth_token');\n    const token = this.helper.decodeToken(auth_token);\n    return token.roles[0];\n  }\n  // Obtener el nombre de usuario, la decodificaciÃ³n se realiza con \n  // un helper ofrecido por auth0/angular-jwt\n  getUsername() {\n    const auth_token = localStorage.getItem('auth_token');\n    const token = this.helper.decodeToken(auth_token);\n    return token.username;\n  }\n  handleError(err) {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    alert(`An error occurred: ${err.error.message}`);\n    console.error(err);\n    return throwError(() => err.error.message);\n  }\n}\nAuthService.Éµfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ÉµÉµinject(i1.HttpClient));\n};\nAuthService.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n  token: AuthService,\n  factory: AuthService.Éµfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","throwError","catchError","tap","map","JwtHelperService","moment","AuthService","constructor","http","login","username","password","headers","set","post","authUrl","pipe","res","console","log","JSON","stringify","localStorage","setItem","token","handleError","register","isLoggedIn","now","isBefore","getExpiration","isLoggedOut","auth_token","getItem","helper","decodeToken","exp","getRole","roles","getUsername","err","alert","error","message","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Gabriel_C\\Desktop\\MAFAH\\client\\src\\app\\core\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\n\r\nimport { throwError } from \"rxjs\";\r\nimport { catchError, tap, map } from \"rxjs/operators\";\r\n\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport * as moment from \"moment\";\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private authUrl = 'https://localhost:8000';\r\n  helper = new JwtHelperService();\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  login(username: string, password: string) {\r\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n    return this.http.post<any>(this.authUrl + '/api/login_check', { username, password }, { headers })\r\n      .pipe(\r\n        map(res => {\r\n          console.log(\"logged in \" + JSON.stringify(res))\r\n          localStorage.setItem('auth_token', res.token);\r\n        }),\r\n        catchError(this.handleError)\r\n      )\r\n  }\r\n\r\n\r\n  register(username: string, password: string) {\r\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n    return this.http.post<any>(this.authUrl + '/api/register', { username, password }, { headers })\r\n      .pipe(\r\n        tap(res => console.log(\"registered \" + JSON.stringify(res)))\r\n      )\r\n  }\r\n\r\n  // ðŸ‘‡ En caso de estar registrado nuestro valor de expiraciÃ³n serÃ¡ menor que el momento actual.\r\n  isLoggedIn() {\r\n      let now = moment();\r\n      return now.isBefore(this.getExpiration());\r\n  }\r\n\r\n  isLoggedOut() {\r\n      return !this.isLoggedIn();\r\n  }\r\n\r\n  getExpiration() {\r\n    const auth_token: any = localStorage.getItem('auth_token');\r\n    const token = this.helper.decodeToken(auth_token);\r\n    if (token == null)\r\n      return moment.now;\r\n    else \r\n      return token.exp;\r\n  }\r\n\r\n  // Obtener el rol decodificando el token almacenado en localStorage.\r\n  public getRole() {\r\n    const auth_token: any = localStorage.getItem('auth_token');\r\n    const token = this.helper.decodeToken(auth_token);\r\n    return token.roles[0];\r\n  }\r\n  // Obtener el nombre de usuario, la decodificaciÃ³n se realiza con \r\n  // un helper ofrecido por auth0/angular-jwt\r\n  public getUsername() {\r\n    const auth_token: any = localStorage.getItem('auth_token');\r\n    const token = this.helper.decodeToken(auth_token);\r\n    return token.username;\r\n  }\r\n\r\n  private handleError(err: any) {\r\n    // in a real world app, we may send the server to some remote logging infrastructure\r\n    // instead of just logging it to the console\r\n    alert(`An error occurred: ${err.error.message}`);\r\n    console.error(err);\r\n    return throwError(() => err.error.message);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}